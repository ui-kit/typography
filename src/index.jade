import scale, {lookup} from '../functions.js'
import Scale from '../index.ess?dynamic'
import './skin.ess'
import './index.ess'

var vars = lookup(__)

h1.Heading Skin
.Display
  .Display-left
    pre
      ='.skin\n'
      ='  var range = \'&-h1 &-h2 &-h3 &-h4 &-p\'\n'
      ='  %ui-kit-typography/index.ess(scale=1.25 range=range)\n'
  .Display-right
    .skin-h1 .skin-h1
    .skin-h2 .skin-h2
    .skin-h3 .skin-h3
    .skin-h4 .skin-h4
    .skin-p .skin-p

h1.Heading Extend
.Display
  .Display-left
    pre
      ='.extend-h1\n'
      ='  %ui-kit-typography/extend.ess(h1)\n'
      ='.extend-h2\n'
      ='  %ui-kit-typography/extend.ess(h2)\n'
      ='.extend-h3\n'
      ='  %ui-kit-typography/extend.ess(h3)\n'
  .Display-right
    .extend-h1 .extend-h1
    .extend-h2 .extend-h2
    .extend-h3 .extend-h3

h1.Heading Raw Function
.Display
  .Display-left
    pre
      ='function SizeScale(args)\n'
      ='  var range = \'big medium small\'\n'
      ='  each r in range.split(\' \')\n'
      ='    &-`r`\n'
      ='      %../extend.ess(at=r scale=args.scale along=args.along range=range mid=1 margins=\'\')\n'
      ='\n'
      ='.heading\n'
      ='  SizeScale(scale=1.25 along=2)\n'
      ='\n'
      ='.paragraph\n'
      ='  SizeScale(scale=1.15 along=1)\n'
  .Display-right
    .heading-big .heading-big
    .heading-medium .heading-medium
    .heading-small .heading-small
    .paragraph-big .paragraph-big
    .paragraph-medium .paragraph-medium
    .paragraph-small .paragraph-small

h1.Heading Dynamic

div(ref='sheet')
Scale&props(state)

.Inputs
  each i, k in vars
    Input(name=k)

.Display
  .Display-left
    pre= state.raw
  .Display-right
    each n in (state.range || '').split(' ')
      El(name=n)

function Input(args)
  var cx = (n) => `Input${n} Input${n}-${args.name}`
  div(className=cx(''))
    label(className=cx('-label'))= args.name[0].toUpperCase() + args.name.slice(1)
    input(className=cx('-text') onChange=this.onChange.bind(null, args.name) value=state[args.name])

function El(args)
  var n = args.name
  var val = state[args.name]
  if val
    var rem = val + 'rem'
    var px = (Math.round(val * state.base * state.round / 10) / (state.round / 10)) + 'px'
    var strong = DOM('strong', null, rem + '/' + px)
    var parts = n.split(':')[0].split('.')
    var tag = parts.shift() || 'div';
    var className = parts.join(' ')
    = DOM(tag, {ref: n, className: className, contentEditable: true}, [n + ' (', strong, ')'])

:module
  export function onChange(name, ev) {
    var val = ev.target.value;
    this.state[name] = val;
    this.setState(this.state);
    this.getStyles();
  }
  
  export function componentDidMount() {
    this.getStyles();
  }
  
  export function getStyles() {
    var sels = this.state.range.split(' ');
    var vals = scale(this.state);
    for (var i = 0; i < vals.length; i++) {
      this.state[sels[i]] = vals[i];
    }
    this.setState(this.state);
    setTimeout(() => {
      this.state.raw = this.refs['sheet'].getDOMNode().nextSibling.textContent;
      this.setState(this.state);
    }, 0);
  }
  
  export var initialState = lookup(__);
